#check power law fits or not 

import powerlaw

G = generate_powerlaw_configuration(1000, gamma=2.5)
degs = [d for _, d in G.degree()]

fit = powerlaw.Fit(degs)
print(f"Estimated alpha: {fit.alpha:.2f}")
print(f"xmin: {fit.xmin}")

# Plot
fit.plot_ccdf(label="Empirical CCDF")
fit.power_law.plot_ccdf(label="Power law fit")
plt.legend()
plt.show()



#complete check - directed graph
import powerlaw
import matplotlib.pyplot as plt

def check_powerlaw_simple(G, plot=True):
    # Get degrees
    if G.is_directed():
        degs = [G.in_degree(n) + G.out_degree(n) for n in G.nodes() if (G.in_degree(n) + G.out_degree(n)) > 0]
    else:
        degs = [d for _, d in G.degree() if d > 0]

    if len(degs) == 0:
        print("No positive-degree nodes to fit. Cannot check power law.")
        return None

    # Fit power-law
    fit = powerlaw.Fit(degs, verbose=False)

    # Compare with lognormal
    R, p = fit.distribution_compare('power_law', 'lognormal')

    # Simple conclusion
    if R > 0 and p < 0.05:
        print(" Power-law fits")
        conclusion = "Power-law fits"
    else:
        print("Does not fit")
        conclusion = "Does not fit"

    # Optional CCDF plot
    if plot:
        fit.plot_ccdf(label="Empirical CCDF")
        fit.power_law.plot_ccdf(label="Power-law fit")
        plt.xlabel("Degree")
        plt.ylabel("P(K â‰¥ k)")
        plt.legend()
        plt.show()

    return fit, conclusion

# Example usage:
G = generate_powerlaw_configuration(1000, gamma=2.5)
fit, conclusion = check_powerlaw_simple(G)
