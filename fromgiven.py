# -*- coding: utf-8 -*-
"""fromgiven.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EgnzqN8Em2TIlcLCabfjM_7mIhG4wqiU
"""

# --- Step 3: Measure Key Properties of Your Graph ---
N = G_real.number_of_nodes()
L = G_real.number_of_edges()
avg_degree = (2 * L) / N
avg_clustering = nx.average_clustering(G_real)

print(f"\n--- Real Graph Properties ---")
print(f"Nodes (N): {N}")
print(f"Edges (L): {L}")
print(f"Average Degree <k>: {avg_degree:.4f}")
print(f"Average Clustering Coefficient C: {avg_clustering:.4f}")

# --- Step 4: Estimate Parameters for Each Model ---
print("\n--- Estimating Model Parameters ---")

# ER Parameters
N_er = N
p_er = avg_degree / (N - 1)
print(f"Erdős-Rényi: N={N_er}, p={p_er:.4f}")

# WS Parameters
N_ws = N
k_ws = round(avg_degree)
if k_ws % 2 != 0: k_ws += 1 # k must be even
print(f"Watts-Strogatz: N={N_ws}, k={k_ws}, p=(requires fitting)")

# SF/BA Parameters
N_sf = N
m_sf = round(avg_degree / 2)
print(f"Scale-Free (BA): N={N_sf}, m={m_sf}")

# --- Step 5: Plot the Real Degree Distribution to Check for Best Fit ---
degree_sequence = sorted([d for n, d in G_real.degree()], reverse=True)
degree_count = collections.Counter(degree_sequence)
deg, cnt = zip(*degree_count.items())

plt.figure(figsize=(8, 6))
plt.loglog(deg, cnt, 'o', color='navy')
plt.title("Degree Distribution of Data from CSV (Log-Log Scale)")
plt.xlabel("Degree (k)")
plt.ylabel("Count P(k)")
plt.grid(True)
plt.show()